from os import makedirs


def dirs_generate(number):
    """
    generate template directories for AtCoder ABC contest
    """

    parent = 'ABC' + number  # e.g. 'ABC166'
    probs = ['A', 'B', 'C', 'D', 'E', 'F']

    for prob in probs:
        dir_path = f'{parent}/{prob}'
        makedirs(dir_path, exist_ok=True)


def file_generate(number):
    """
    generate template file and testcode for AtCoder ABC contest
    test file assumes function "resolve()" solves your problem (ref. AtCoder Unit Test)
    """
    parent = f'ABC{number}'
    probs = ['A', 'B', 'C', 'D', 'E', 'F']

    ans_header = 'def resolve():\n    ' \
                 'import sys\n    ' \
                 'read = sys.stdin.buffer.read\n    ' \
                 'readline = sys.stdin.buffer.readline\n    ' \
                 'readlines = sys.stdin.buffer.readlines\n    ' \
                 'sys.setrecursionlimit(10**7)\n\n    '

    for prob in probs:
        path = f'{parent}/{prob}'

        # write file for answer
        with open(f'{path}/main.py', mode='w') as f:
            f.write(ans_header)

        # write file for test
        test_path = f'{path}/test_{prob}.py'
        test_header = f'# Paste unittests generated by AtCoder Unit Test\n\n'\
                      f'from {parent}.{prob}.main import resolve\n'

        with open(test_path, mode='w') as f:
            f.write(test_header)


if __name__ == '__main__':
    num = input('input number of ABC contest(e.g. 174)\n')
    dirs_generate(num)
    file_generate(num)
